var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "fieldHandlers", function () {
  return fieldHandlers;
});
_parcelHelpers.export(exports, "state", function () {
  return state;
});
_parcelHelpers.export(exports, "lawAgreements", function () {
  return lawAgreements;
});
_parcelHelpers.export(exports, "ageExpInx", function () {
  return ageExpInx;
});
_parcelHelpers.export(exports, "agreePolicyInx", function () {
  return agreePolicyInx;
});
_parcelHelpers.export(exports, "coloringBorder", function () {
  return coloringBorder;
});
_parcelHelpers.export(exports, "deColoringBorder", function () {
  return deColoringBorder;
});
_parcelHelpers.export(exports, "reformDate", function () {
  return reformDate;
});
_parcelHelpers.export(exports, "objToFormData", function () {
  return objToFormData;
});
_parcelHelpers.export(exports, "translateDate", function () {
  return translateDate;
});
_parcelHelpers.export(exports, "bookCar", function () {
  return bookCar;
});
_parcelHelpers.export(exports, "percentsToTime", function () {
  return percentsToTime;
});
_parcelHelpers.export(exports, "timeToPercent", function () {
  return timeToPercent;
});
_parcelHelpers.export(exports, "transferReceiveTime", function () {
  return transferReceiveTime;
});
_parcelHelpers.export(exports, "transferReturnTime", function () {
  return transferReturnTime;
});
_parcelHelpers.export(exports, "checkingInputPhone", function () {
  return checkingInputPhone;
});
_parcelHelpers.export(exports, "inputHandler", function () {
  return inputHandler;
});
_parcelHelpers.export(exports, "phoneAdditional", function () {
  return phoneAdditional;
});
_parcelHelpers.export(exports, "lawAgreementHandlerAgeExpr", function () {
  return lawAgreementHandlerAgeExpr;
});
_parcelHelpers.export(exports, "lawAgreementHandlerAgreePolicy", function () {
  return lawAgreementHandlerAgreePolicy;
});
_parcelHelpers.export(exports, "receivePlaceHandle", function () {
  return receivePlaceHandle;
});
_parcelHelpers.export(exports, "returnPlaceHandle", function () {
  return returnPlaceHandle;
});
_parcelHelpers.export(exports, "carPreview", function () {
  return carPreview;
});
_parcelHelpers.export(exports, "datePreview", function () {
  return datePreview;
});
_parcelHelpers.export(exports, "costPreview", function () {
  return costPreview;
});
_parcelHelpers.export(exports, "showCustomReceivePlaceInput", function () {
  return showCustomReceivePlaceInput;
});
_parcelHelpers.export(exports, "showCustomReturnPlaceInput", function () {
  return showCustomReturnPlaceInput;
});
_parcelHelpers.export(exports, "hideCal", function () {
  return hideCal;
});
_parcelHelpers.export(exports, "firstDateIsSelect", function () {
  return firstDateIsSelect;
});
_parcelHelpers.export(exports, "secondDateIsSelect", function () {
  return secondDateIsSelect;
});
_parcelHelpers.export(exports, "firstDate", function () {
  return firstDate;
});
_parcelHelpers.export(exports, "secondDate", function () {
  return secondDate;
});
_parcelHelpers.export(exports, "setFirstDate", function () {
  return setFirstDate;
});
_parcelHelpers.export(exports, "dropFirstDate", function () {
  return dropFirstDate;
});
_parcelHelpers.export(exports, "setSecondDate", function () {
  return setSecondDate;
});
_parcelHelpers.export(exports, "dropSecondDate", function () {
  return dropSecondDate;
});
_parcelHelpers.export(exports, "isDateShouldBeDisabled", function () {
  return isDateShouldBeDisabled;
});
_parcelHelpers.export(exports, "checkingReceiveTime", function () {
  return checkingReceiveTime;
});
_parcelHelpers.export(exports, "checkingReturnTime", function () {
  return checkingReturnTime;
});
_parcelHelpers.export(exports, "genTimeHTML", function () {
  return genTimeHTML;
});
_parcelHelpers.export(exports, "getFreeReceiveTime", function () {
  return getFreeReceiveTime;
});
_parcelHelpers.export(exports, "getFreeReturnTime", function () {
  return getFreeReturnTime;
});
_parcelHelpers.export(exports, "saveReceiveTime", function () {
  return saveReceiveTime;
});
_parcelHelpers.export(exports, "offReturnTime", function () {
  return offReturnTime;
});
_parcelHelpers.export(exports, "clearReceiveDate", function () {
  return clearReceiveDate;
});
_parcelHelpers.export(exports, "clearReturnDate", function () {
  return clearReturnDate;
});
var _lodash = require('lodash');
var _lodashDefault = _parcelHelpers.interopDefault(_lodash);
var _namespaces = require('./namespaces');
var _stateDataFromServer = require('./state/dataFromServer');
var _connectionIndex = require('./connection/index');
var _dateFns = require('date-fns');
var _jquery = require('jquery');
var _jqueryDefault = _parcelHelpers.interopDefault(_jquery);
const fieldHandlers = [_namespaces.dateObj, _namespaces.receivePlace, _namespaces.returnPlace, _namespaces.customerName, _namespaces.customerPhone, _namespaces.lawAgreementNamespace];
const state = new Array(fieldHandlers.length).fill(false);
const lawAgreements = new Array(2).fill('');
const ageExpInx = 0;
const agreePolicyInx = 1;
function coloringBorder(inx, fieldClass) {
  _jqueryDefault.default(`#${fieldHandlers[inx].id}`).addClass(fieldClass);
}
function deColoringBorder(inx, fieldClass) {
  _jqueryDefault.default(`#${fieldHandlers[inx].id}`).removeClass(fieldClass);
}
function reformDate(date) {
  if (!date) return;
  let [dt, time] = date.split(' ');
  dt = dt.split('.').reverse().join('-');
  return `${dt} ${time}`;
}
function objToFormData(obj) {
  const form = new FormData();
  Object.keys(obj).forEach(item => {
    form.append(item, obj[item]);
  });
  return form;
}
function translateDate(start, end) {
  if (!start || !end) return '';
  const d1 = new Date(start.split(' ')[0]);
  const d2 = new Date(end.split(' ')[0]);
  const t1 = start.split(' ')[1];
  const t2 = end.split(' ')[1];
  const numOfDays = (d2 - d1) / 1000 / (24 * 3600) + 1;
  const numOfDaysStr = numOfDays.toString();
  let dayWord = '';
  let last2num = parseInt(numOfDaysStr, 10);
  if (last2num >= 10 && last2num <= 19) {
    dayWord = 'дней';
    return `на ${numOfDaysStr} ${dayWord} с ${d1.toLocaleDateString()} ${t1} по ${d2.toLocaleDateString()} ${t2}`;
  }
  let lastNum = parseInt(numOfDaysStr.charAt(numOfDaysStr.length - 1), 10);
  if (lastNum === 1) dayWord = 'день'; else if (lastNum === 0) dayWord = 'дней'; else if (lastNum > 1 && lastNum < 5) dayWord = 'дня'; else if (lastNum >= 5) dayWord = 'дней';
  return `на ${numOfDaysStr} ${dayWord} с ${d1.toLocaleDateString()} ${t1} по ${d2.toLocaleDateString()} ${t2}`;
}
async function bookCar() {
  if (_stateDataFromServer.dataFromServer.dataSent) return;
  let badBit = false;
  state.forEach((el, inx) => {
    if (!el) {
      // coloringBorder(inx, fieldClasses.validationFailed);
      badBit = true;
    } else {}
  });
  const custName = `${_jqueryDefault.default(`#${_namespaces.customerName.id}`).val()} -`;
  const custPhone = `${_jqueryDefault.default(`#${_namespaces.customerPhone.id}`).val()}`;
  const car_id = 9;
  const begin = reformDate(_jqueryDefault.default(`#leftDate`).val());
  const end = reformDate(_jqueryDefault.default(`#rightDate`).val());
  const receivePlaceId = _stateDataFromServer.dataFromServer.getPlaceId(_jqueryDefault.default(`#receivePlaceSelect`).val());
  const returnPlaceId = _stateDataFromServer.dataFromServer.getPlaceId(_jqueryDefault.default(`#returnPlaceSelect`).val());
  const include_reserves = true;
  const include_idles = true;
  const city_id = 1;
  if (badBit) return false;
  const bidObj = {
    fio: custName,
    phone: custPhone,
    car_id: 9,
    begin: begin,
    end: end,
    begin_place_id: receivePlaceId,
    end_place_id: returnPlaceId,
    prepayment: 0,
    file: ''
  };
  const bidForm = objToFormData(bidObj);
  // const bid = await sendRequest(bidForm);
  // if (bid.bid_id) {
  // $(`#bookButtonId`).text('Поздравляем! Заявка на бронироавние успешно отправлена!');
  // $(`#bookButtonId`).removeClass('book__btn');
  // $(`#bookButtonId`).addClass('book__btn_send');
  // dataFromServer.dataSent = true;
  // }
  return true;
}
function percentsToTime(percent) {
  // проценты это шаги по 15 минут, 1 процент - 15 минут
  const minutes = percent * 15;
  const milisecondsPerMinutes = 1000 * 60 * minutes;
  // convert Thu, 01 Jan 1970 12:00:00 GMT
  // to 12:00
  return new Date(milisecondsPerMinutes).toUTCString().split(' ')[4].slice(0, 5);
}
function timeToPercent(timestamp) {
  // проценты это шаги по 15 минут, 1 процент - 15 минут
  // const minutes = percent * 15;
  const mil = _dateFns.hoursToMilliseconds(timestamp.getHours()) + _dateFns.minutesToMilliseconds(timestamp.getMinutes());
  const percent = Math.ceil(mil / _dateFns.hoursToMilliseconds(24) * 100);
  return percent - 3;
}
function transferReceiveTime() {
  const time = percentsToTime(_jqueryDefault.default(this).val());
  const data = _jqueryDefault.default('#leftDate').val();
  const date = data.length > 0 ? data.split(' ')[0] : '';
  if (date === '') return;
  _jqueryDefault.default('#leftDate').val(`${date} ${time}`);
}
function transferReturnTime() {
  const time = percentsToTime(_jqueryDefault.default(this).val());
  const data = _jqueryDefault.default('#rightDate').val();
  const date = data.length > 0 ? data.split(' ')[0] : '';
  if (date === '') return;
  _jqueryDefault.default('#rightDate').val(`${date} ${time}`);
}
function checkingInputPhone() {
  const inx = _namespaces.customerPhone.inx;
  if (validationPhone(_jqueryDefault.default(`#${_namespaces.customerPhone.id}`).val())) {
    state[inx] = true;
    coloringBorder(inx, _namespaces.fieldClasses.validationPassed);
    deColoringBorder(inx, _namespaces.fieldClasses.validationFailed);
    return;
  }
  state[inx] = false;
  coloringBorder(inx, _namespaces.fieldClasses.validationFailed);
  deColoringBorder(inx, _namespaces.fieldClasses.validationPassed);
}
function inputHandler(namespace, validator) {
  return () => {
    const inx = namespace.inx;
    if (validator(_jqueryDefault.default(`#${namespace.id}`).val())) {
      state[inx] = true;
      coloringBorder(inx, _namespaces.fieldClasses.validationPassed);
      deColoringBorder(inx, _namespaces.fieldClasses.validationFailed);
      return;
    }
    state[inx] = false;
    coloringBorder(inx, _namespaces.fieldClasses.validationFailed);
    deColoringBorder(inx, _namespaces.fieldClasses.validationPassed);
  };
}
function phoneAdditional() {
  if (_jqueryDefault.default(this).val() == '') _jqueryDefault.default(this).val('+7');
}
function lawAgreementHandlerAgeExpr() {
  return () => {
    lawAgreement[ageExpInx] = lawAgreement[ageExpInx] === true ? false : true;
    if (lawAgreement[ageExpInx] && lawAgreement[agreePolicyInx]) {
      _jqueryDefault.default(`#${_namespaces.lawAgreementNamespace.id}`).addClass(_namespaces.fieldClasses.validationPassed);
      state[_namespaces.lawAgreementNamespace.inx] = true;
    } else if (!lawAgreement[ageExpInx] || !lawAgreement[agreePolicyInx]) {
      _jqueryDefault.default(`#${_namespaces.lawAgreementNamespace.id}`).removeClass(_namespaces.fieldClasses.validationPassed);
      state[_namespaces.lawAgreementNamespace.inx] = false;
    }
  };
}
function lawAgreementHandlerAgreePolicy() {
  return () => {
    lawAgreement[agreePolicyInx] = lawAgreement[agreePolicyInx] === true ? false : true;
    if (lawAgreement[ageExpInx] && lawAgreement[agreePolicyInx]) {
      _jqueryDefault.default(`#${_namespaces.lawAgreementNamespace.id}`).addClass(_namespaces.fieldClasses.validationPassed);
      state[_namespaces.lawAgreementNamespace.inx] = true;
    } else if (!lawAgreement[ageExpInx] || !lawAgreement[agreePolicyInx]) {
      _jqueryDefault.default(`#${_namespaces.lawAgreementNamespace.id}`).removeClass(_namespaces.fieldClasses.validationPassed);
      state[_namespaces.lawAgreementNamespace.inx] = false;
    }
  };
}
function receivePlaceHandle() {
  const val = _jqueryDefault.default('#receivePlaceSelect').val();
  if (val != '') {
    state[_namespaces.receivePlace.inx] = true;
    coloringBorder(_namespaces.receivePlace.inx, _namespaces.fieldClasses.validationPassed);
  } else {
    state[_namespaces.receivePlace.inx] = false;
    deColoringBorder(_namespaces.receivePlace.inx, _namespaces.fieldClasses.validationPassed);
  }
}
function returnPlaceHandle() {
  const val = _jqueryDefault.default('#returnPlaceSelect').val();
  if (val != '') {
    state[_namespaces.returnPlace.inx] = true;
    coloringBorder(_namespaces.returnPlace.inx, _namespaces.fieldClasses.validationPassed);
  } else {
    state[_namespaces.returnPlace.inx] = false;
    deColoringBorder(_namespaces.returnPlace.inx, _namespaces.fieldClasses.validationPassed);
  }
}
async function carPreview() {
  const currCar = _stateDataFromServer.dataFromServer.getCurrentCar();
  if (!currCar) return;
  /*
  тут убираем цвет, а после его выбора, надпись обновится
  */
  // 0 потому что все машине в массиве отличаются только цветом
  const car = currCar[0].model.replace(/\([^\s]+\)/, '');
  // убираем цвет
  _jqueryDefault.default('#carName').text(`Аренда: ${car}`);
}
function datePreview() {
  if (_stateDataFromServer.dataFromServer.dateIsBad) return;
  const begin = reformDate(_jqueryDefault.default(`#leftDate`).val());
  const end = reformDate(_jqueryDefault.default(`#rightDate`).val());
  _jqueryDefault.default(`#periodRent`).text(translateDate(begin, end));
}
async function costPreview() {
  if (_stateDataFromServer.dataFromServer.dateIsBad) return;
  const begin = reformDate(_jqueryDefault.default(`#leftDate`).val());
  const end = reformDate(_jqueryDefault.default(`#rightDate`).val());
  let receivePlaceId = _stateDataFromServer.dataFromServer.getPlaceId(_jqueryDefault.default(`#receivePlaceSelect`).val());
  receivePlaceId = receivePlaceId ? receivePlaceId : _stateDataFromServer.dataFromServer.getFreePlace();
  let returnPlaceId = _stateDataFromServer.dataFromServer.getPlaceId(_jqueryDefault.default(`#returnPlaceSelect`).val());
  returnPlaceId = returnPlaceId ? returnPlaceId : _stateDataFromServer.dataFromServer.getFreePlace();
  if (!begin || !end) {
    const deliveryCost = _stateDataFromServer.dataFromServer.getDeliveryCost(receivePlaceId) + _stateDataFromServer.dataFromServer.getDeliveryCost(returnPlaceId);
    const resolution = `Итого: ${deliveryCost} ₽`;
    _jqueryDefault.default(`#bidCost`).text(`Cтоимость доставки авто ${deliveryCost} ₽`);
    _jqueryDefault.default(`#resolution`).text(resolution);
    return;
  }
  if (_stateDataFromServer.dataFromServer.carToBid === '') throw new Error('bad');
  const bidCostObj = {
    car_id: _stateDataFromServer.dataFromServer.carToBid,
    begin: begin,
    end: end,
    begin_place_id: receivePlaceId,
    end_place_id: returnPlaceId
  };
  const bidCost = await _connectionIndex.getCost(bidCostObj);
  const deliveryCost = _stateDataFromServer.dataFromServer.getDeliveryCost(receivePlaceId) + _stateDataFromServer.dataFromServer.getDeliveryCost(returnPlaceId);
  const depositStr = `+ залог (возвращаем полностью по окончанию аренды) ${bidCost.deposit} ₽`;
  const resolution = `Итого: ${bidCost.cost + bidCost.deposit + deliveryCost} ₽`;
  if (deliveryCost > 0) _jqueryDefault.default(`#bidCost`).text(`Cтоимость аренды ${bidCost.cost - deliveryCost} ₽ + доставка авто ${deliveryCost} ₽`); else _jqueryDefault.default(`#bidCost`).text(`Cтоимость аренды: ${bidCost.cost} ₽ `);
  _jqueryDefault.default(`#deposit`).text(depositStr);
  _jqueryDefault.default(`#resolution`).text(resolution);
}
function showCustomReceivePlaceInput() {
  if (_jqueryDefault.default(this).val() === 'Подача по городу + 300 ₽') {
    _jqueryDefault.default(`#receiveCustomPlace`).removeClass('customPlace-hidden');
    _jqueryDefault.default(`#receiveCustomPlace`).addClass('customPlace-visible');
    _jqueryDefault.default(`#receiveCustomPlace-wrap`).removeClass('customPlace-wrap-start');
    _jqueryDefault.default(`#receiveCustomPlace-wrap`).removeClass('customPlace-hidden');
    _jqueryDefault.default(`#receiveCustomPlace-wrap`).addClass('customPlace-visible');
  } else {
    setTimeout(() => {
      _jqueryDefault.default(`#receiveCustomPlace`).removeClass('customPlace-visible');
      _jqueryDefault.default(`#receiveCustomPlace`).addClass('customPlace-hidden');
      _jqueryDefault.default(`#receiveCustomPlace-wrap`).addClass('customPlace-hidden');
      _jqueryDefault.default(`#receiveCustomPlace-wrap`).addClass('customPlace-wrap-start');
      _jqueryDefault.default(`#receiveCustomPlace-wrap`).removeClass('customPlace-visible');
    }, 200);
  }
}
function showCustomReturnPlaceInput() {
  if (_jqueryDefault.default(this).val() === 'Подача по городу + 300 ₽') {
    _jqueryDefault.default(`#returnCustomPlace`).removeClass('customPlace-hidden');
    _jqueryDefault.default(`#returnCustomPlace`).addClass('customPlace-visible');
    _jqueryDefault.default(`#returnCustomPlace-wrap`).removeClass('customPlace-wrap-end');
    _jqueryDefault.default(`#returnCustomPlace-wrap`).removeClass('customPlace-hidden');
    _jqueryDefault.default(`#returnCustomPlace-wrap`).addClass('customPlace-visible');
  } else {
    setTimeout(() => {
      _jqueryDefault.default(`#returnCustomPlace`).removeClass('customPlace-visible');
      _jqueryDefault.default(`#returnCustomPlace`).addClass('customPlace-hidden');
      _jqueryDefault.default(`#returnCustomPlace-wrap`).addClass('customPlace-hidden');
      _jqueryDefault.default(`#returnCustomPlace-wrap`).addClass('customPlace-wrap-end');
      _jqueryDefault.default(`#returnCustomPlace-wrap`).removeClass('customPlace-visible');
    }, 200);
  }
}
function hideCal() {
  _jqueryDefault.default('.ex-inputs-picker').removeClass('ex-inputs-picker-visible');
}
let firstDateIsSelect = false;
let secondDateIsSelect = false;
let firstDate = '';
let secondDate = '';
const setFirstDate = dt => {
  firstDateIsSelect = true;
  firstDate = dt;
  getFreeReceiveTime();
};
const dropFirstDate = () => {
  firstDateIsSelect = false;
  firstDate = '';
};
const setSecondDate = dt => {
  secondDateIsSelect = true;
  secondDate = dt;
  getFreeReturnTime();
};
const dropSecondDate = () => {
  secondDateIsSelect = false;
  secondDate = '';
  clearReceiveDate();
  clearReturnDate();
};
function isDateShouldBeDisabled(timestamp) {
  let dt0 = new Date().toLocaleDateString().split(' ')[0];
  let dt1 = timestamp.toLocaleDateString().split(' ')[0];
  dt0 = dt0.split('.');
  dt0 = new Date(dt0[2], dt0[1], dt0[0]);
  dt1 = dt1.split('.');
  dt1 = new Date(dt1[2], dt1[1], dt1[0]);
  // if (dt0 > dt1)
  // return true;
  let dateAfterSelect = '';
  if (firstDateIsSelect) {
    dt0 = firstDate.toLocaleDateString().split(' ')[0];
    dt0 = dt0.split('.');
    dt0 = new Date(dt0[2], dt0[1], dt0[0]);
    if (dt1 - dt0 > 1000 * 60 * 60 * 24 * 29) return true;
    if (dt1 - dt0 < -1000 * 60 * 60 * 24 * 29) {
      return true;
    }
    const dts = _stateDataFromServer.dataFromServer.freePeriods.filter((perObj, carInx) => perObj.periods.some(per => {
      return per.some(dt => {
        if (_dateFns.isEqual(dt, firstDate)) {
          _stateDataFromServer.dataFromServer.carToBid.push(_stateDataFromServer.dataFromServer.freePeriods[carInx].car_id);
          return true;
        }
      });
    }));
    _stateDataFromServer.dataFromServer.carToBid = _lodashDefault.default.uniq(_stateDataFromServer.dataFromServer.carToBid);
    dateAfterSelect = dts;
  }
  const periods = dateAfterSelect ? dateAfterSelect : _stateDataFromServer.dataFromServer.freePeriods;
  // в этой непонятной куче кода происходит примернос следующее:
  // мы имеем 3 вложенных массива: periods <- periods (+ carid) <- timestaps
  // задача этого кода найти первое совпадение с timestamp в любом из вложенных массивов
  return !periods.some(perObj => perObj.periods.some(per => per.some((dt, inx) => {
    if (_dateFns.isEqual(timestamp, dt)) {
      return true;
    }
  })));
}
function checkingReceiveTime() {
  const time = percentsToTime(_jqueryDefault.default(this).val()).split(':');
  const fd = new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate(), parseInt(time[0], 10), parseInt(time[1], 10));
  let busyCars = [];
  _stateDataFromServer.dataFromServer.rawPeriods.some(rawPeriod => {
    const res = rawPeriod.periods.some(period => {
      let begin = new Date(period.begin);
      let end = new Date(period.end);
      begin = _dateFns.addMinutes(begin, begin.getTimezoneOffset());
      end = _dateFns.addMinutes(end, end.getTimezoneOffset());
      if (!_dateFns.isWithinInterval(fd, {
        start: begin,
        end: end
      })) {
        _jqueryDefault.default(this).val(timeToPercent(end));
        // busyCars.push(rawPeriod.car_id);
        return true;
      }
      return false;
    });
    return res;
  });
  const dateIsBad = busyCars.length === _stateDataFromServer.dataFromServer.rawPeriods.length - 3 ? true : false;
  if (dateIsBad) {
    _stateDataFromServer.dataFromServer.dateIsBad = true;
    _jqueryDefault.default('#timeNotificsId').addClass('time_notifics-show');
    _jqueryDefault.default('#notificsTimeLeft').addClass('notifics-time-left-show');
  } else {
    _jqueryDefault.default('#notificsTimeLeft').removeClass('notifics-time-left-show');
    _jqueryDefault.default('#timeNotificsId').removeClass('time_notifics-show');
  }
}
function checkingReturnTime() {
  const time = percentsToTime(_jqueryDefault.default(this).val());
  _jqueryDefault.default('#timeNotificsId').removeClass('time_notifics-show');
  _jqueryDefault.default('#timeNotificsId').removeClass('time_notifics-show');
  _jqueryDefault.default('#notificsTimeLeft').removeClass('notifics-time-left-show');
}
/**
* @function
* @param {Date} time
* @description проверяет дату на предмет того, является ли она пограничной, то есть является ли она begin или end
*/
function isBorder(time) {
  let periods = [];
  _stateDataFromServer.dataFromServer.rawPeriods.forEach(// ищем в сырых периодах пограничные дни
  (carAndPeriods, carInx) => carAndPeriods.periods.forEach(// проверяем каждый период
  item => {
    let begin = new Date(item.begin);
    let end = new Date(item.end);
    let ltime = new Date(time);
    // -------------------------------------------------------
    // проблема в том, что при создании даты из значения полученного от сервера, к времени добавляется 3 часа
    begin = _dateFns.addMinutes(begin, begin.getTimezoneOffset());
    end = _dateFns.addMinutes(end, end.getTimezoneOffset());
    let lbegin = _dateFns.format(begin, 'yyyy-MM-dd');
    let lend = _dateFns.format(end, 'yyyy-MM-dd');
    ltime = _dateFns.format(time, 'yyyy-MM-dd');
    if (lend === ltime || lbegin === ltime) {
      const a = periods.findIndex(p => p.car_id === carAndPeriods.car_id);
      if (a >= 0) {
        periods[a].periods.push({
          begin: begin,
          end: end
        });
      } else {
        periods.push({
          car_id: carAndPeriods.car_id,
          periods: []
        });
        periods[periods.length - 1].periods.push({
          begin: begin,
          end: end
        });
      }
    }
  }));
  return periods;
}
// ------------------------------------------------------------------------------------------------
/**
* @function
* @param {Date} time
* @param {Period} intervals
* @returns {Boolean}
* @description определяет доступность даты с точки зрения группы интервалов: дата недоступна, если она находится между 00:00 и begin  или между end и begin двух периодов
*/
function timeIsUnvaiable(time, intervals, returnOffset) {
  // округление периодов начала до 00:00 текущего дня
  let timeIsFree = false;
  intervals.forEach(carsAndPeriods => {
    carsAndPeriods.periods.forEach(period => {
      const roundEnd = new Date(period.end.getFullYear(), period.end.getMonth(), period.end.getDate());
      const localPeriod = {
        begin: new Date(period.begin),
        end: new Date(period.end)
      };
      if (_dateFns.isBefore(localPeriod.begin, roundEnd) && roundEnd - localPeriod.begin > 1000 * 60 * 60 * 24) localPeriod.begin = roundEnd;
      if (returnOffset) {}
      if (!timeIsFree && _dateFns.isWithinInterval(time, {
        start: localPeriod.begin,
        end: localPeriod.end
      })) {
        timeIsFree = true;
      }
    });
  });
  return !timeIsFree;
}
// ------------------------------------------------------------------------------------------------
/**
* @function
* @param {Array} times - разленный по 15 минут firstDate
* @param {Array} periods
* @return {string}
* @description генерирует разметку для select для пограничных timestamp
*/
function borderTime(times, periods, returnOffset, retStr) {
  if (!firstDateIsSelect) return;
  let str = '';
  _stateDataFromServer.dataFromServer.disabledSecond.splice(0, _stateDataFromServer.dataFromServer.disabledSecond.length);
  times = times.map(// определяем доступность времени для брони, к недоступному времени добавляется !
  item => {
    if (timeIsUnvaiable(item, periods, returnOffset)) {
      _stateDataFromServer.dataFromServer.disabledSecond.push(_dateFns.format(item, 'HH:mm'));
      return _dateFns.format(item, '!HH:mm');
    } else return _dateFns.format(item, 'HH:mm');
  });
  times.forEach(// генерируем разметку для доступного и недоступного времени
  (item, inx) => {
    if (item.charAt(0) === '!') {
      const tmStr = item.slice(1, item.length);
      str += genTimeHTML(`${tmStr}`, true, '') + '\n';
      return;
    }
    str += genTimeHTML(`${item}`, false, retStr) + '\n';
  });
  return str;
}
function genTimeHTML(timestr, disabled, returnStr) {
  return disabled ? `<option id="time-${timestr.replace(':', '-')}-${returnStr}" disabled> ${timestr} </option>` : `<option id="time-${timestr.replace(':', '-')}-${returnStr}" class="timeOption" > ${timestr} </option>`;
}
function getFreeReceiveTime() {
  if (!firstDateIsSelect) return;
  let times = _dateFns.eachMinuteOfInterval({
    start: firstDate,
    end: _dateFns.addHours(firstDate, 24)
  }, {
    step: 15
  });
  times.splice(times.length - 1);
  // удаляем 00:00 в конце интервала, так как это след. день
  let selStr = '';
  const borders = isBorder(firstDate);
  if (borders.length > 0) {
    selStr = borderTime(times, borders, false, false);
  } else times.forEach(item => {
    selStr += genTimeHTML(`${item.toLocaleTimeString().slice(0, 5)}`, false) + '\n';
  });
  _jqueryDefault.default('#selectReceiveDate').html(selStr);
}
function getFreeReturnTime() {
  if (!secondDateIsSelect) return;
  let times = _dateFns.eachMinuteOfInterval({
    start: secondDate,
    end: _dateFns.addHours(secondDate, 24)
  }, {
    step: 15
  });
  times.splice(times.length - 1);
  // удаляем 00:00 в конце интервала, так как это след. день
  let selStr = '';
  const borders = isBorder(secondDate);
  if (borders.length > 0) {
    selStr = borderTime(times, borders, true, 'return');
  } else times.forEach(item => {
    selStr += genTimeHTML(`${item.toLocaleTimeString().slice(0, 5)}`, false, 'return') + '\n';
  });
  _jqueryDefault.default('#selectReturnDate').html(selStr);
}
function saveReceiveTime() {
  let firstTime = _jqueryDefault.default(this).val();
}
function offReturnTime() {
  if (!firstDateIsSelect || !secondDateIsSelect) return;
  let times = _dateFns.eachMinuteOfInterval({
    // нарезаем день по 15 минут
    start: secondDate,
    end: _dateFns.addHours(secondDate, 24)
  }, {
    step: 15
  });
  times = times.map(time => {
    // изменяем кусочки из timestamp в простое представление
    return _dateFns.format(time, 'HH:mm');
  });
  times.splice(times.length - 1);
  // удаляем 00:00
  if (firstDate.toLocaleDateString() != secondDate.toLocaleDateString()) return;
  let firstTime = _jqueryDefault.default(`#selectReceiveDate`).val();
  const inx = times.findIndex(a => a === firstTime);
  firstTime = firstTime.replace(':', '-');
  times.forEach(// создаем разметку активных элементов option
  item => {
    if (!_stateDataFromServer.dataFromServer.disabledSecond.find(a => a === item)) {
      _jqueryDefault.default(`#time-${item.replace(':', '-')}-return`).attr('disabled', null);
    }
  });
  times.slice(0, inx + 1).forEach(// выключаем options если они более ранние или равны дате получения авто
  item => {
    _jqueryDefault.default(`#time-${item.replace(':', '-')}-return`).attr('disabled', true);
  });
}
function clearReceiveDate() {
  _jqueryDefault.default('#selectReceiveDate').html('');
}
function clearReturnDate() {
  _jqueryDefault.default('#selectReturnDate').html('');
}
