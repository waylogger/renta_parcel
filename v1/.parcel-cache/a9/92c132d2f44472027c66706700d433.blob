var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "createPlaceSelect", function () {
  return createPlaceSelect;
});
require('regenerator-runtime/runtime');
var _connectionIndex = require('../connection/index');
require('jquery');
var _stateDataFromServer = require('../state/dataFromServer');
/**
* @file placeSelector.js
* @module client/components/placeSelector.js
*/
/**
* @function
* @param {string} place
* @param {number} price
*/
function createOption(data, cost) {
  const freeHTML = `
	<option>
	<span>
		${data} 
	</span>
</option>
	`;
  const defHTML = `
	<option>
		<span>
			${data} <span class="book__field-cost-option"> + ${cost} ₽</span>
		</span>
	</option>
`;
  const unDefHTML = `
	<option>
		<span>
		</span>
	</option>
`;
  if (data && cost) {
    return defHTML;
  } else if (data) return freeHTML; else return unDefHTML;
}
async function createPlaceSelect() {
  let placeHTML = '';
  _stateDataFromServer.dataFromServer.placesToReceiveOrReturnCar = (await _connectionIndex.getPlaceList()).places;
  _stateDataFromServer.dataFromServer.placesToReceiveOrReturnCar.splice(0, 3);
  _stateDataFromServer.dataFromServer.placesToReceiveOrReturnCar.push({
    place_id: 164,
    title: "Подача по городу",
    city_id: 4,
    delivery_cost: 300,
    archive: false
  });
  _stateDataFromServer.dataFromServer.placesToReceiveOrReturnCar.forEach((item, el) => {
    const rStr = item.delivery_cost > 0 ? createOption(item.title, item.delivery_cost) : createOption(item.title);
    placeHTML += rStr;
  });
  _stateDataFromServer.dataFromServer.placeHtml = placeHTML;
}
;
