var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "dateObj", function () {
  return dateObj;
});
_parcelHelpers.export(exports, "receivePlace", function () {
  return receivePlace;
});
_parcelHelpers.export(exports, "returnPlace", function () {
  return returnPlace;
});
_parcelHelpers.export(exports, "customerName", function () {
  return customerName;
});
_parcelHelpers.export(exports, "customerPhone", function () {
  return customerPhone;
});
_parcelHelpers.export(exports, "proofOfAgeAndExperience", function () {
  return proofOfAgeAndExperience;
});
_parcelHelpers.export(exports, "agreementWithPolicy", function () {
  return agreementWithPolicy;
});
_parcelHelpers.export(exports, "lawAgreementNamespace", function () {
  return lawAgreementNamespace;
});
_parcelHelpers.export(exports, "fieldClasses", function () {
  return fieldClasses;
});
const dateObj = {
  id: 'dateListener',
  inx: 0,
  handler: () => {},
  errMess: 'Не выбрана начальная дата бронирования'
};
const receivePlace = {
  id: 'receivePlace',
  inx: 1,
  handler: () => {},
  errMess: 'Не выбрано место получения авто'
};
const returnPlace = {
  id: 'returnPlace',
  inx: 2,
  handler: () => {},
  errMess: 'Не выбрано место возврата авто'
};
const customerName = {
  id: 'customerName',
  inx: 3,
  handler: () => {},
  errMess: 'Введено некорректное имя'
};
const customerPhone = {
  id: 'customerPhone',
  inx: 4,
  handler: () => {},
  errMess: 'Введен некорректный номер телефона'
};
const proofOfAgeAndExperience = {
  id: 'proofOfAgeAndExperience',
  inx: 5,
  handler: () => {},
  errMess: 'Не подтверждены возраст и водительский стаж'
};
const agreementWithPolicy = {
  id: 'agreementWithPolicy',
  inx: 6,
  handler: () => {},
  errMess: 'Отсутствует согласие с политикой обработки данных'
};
const lawAgreementNamespace = {
  id: 'lawAgreement',
  inx: 5
};
const fieldClasses = {
  validationFailed: 'validationFailed',
  validationPassed: 'validationPassed',
  validationPartedPassed: 'validationPartedPassed'
};
