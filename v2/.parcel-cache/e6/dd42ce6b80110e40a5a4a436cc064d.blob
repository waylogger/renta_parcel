var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _addMinutesIndexJs = require("../addMinutes/index.js");
var _addMinutesIndexJsDefault = _parcelHelpers.interopDefault(_addMinutesIndexJs);
var _toDateIndexJs = require("../toDate/index.js");
var _toDateIndexJsDefault = _parcelHelpers.interopDefault(_toDateIndexJs);
var _startOfMinuteIndexJs = require("../startOfMinute/index.js");
var _startOfMinuteIndexJsDefault = _parcelHelpers.interopDefault(_startOfMinuteIndexJs);
var _libRequiredArgsIndexJs = require("../_lib/requiredArgs/index.js");
var _libRequiredArgsIndexJsDefault = _parcelHelpers.interopDefault(_libRequiredArgsIndexJs);
function eachMinuteOfInterval(interval, options) {
  _libRequiredArgsIndexJsDefault.default(1, arguments);
  var startDate = _startOfMinuteIndexJsDefault.default(_toDateIndexJsDefault.default(interval.start));
  var endDate = _startOfMinuteIndexJsDefault.default(_toDateIndexJsDefault.default(interval.end));
  var startTime = startDate.getTime();
  var endTime = endDate.getTime();
  if (startTime >= endTime) {
    throw new RangeError('Invalid interval');
  }
  var dates = [];
  var currentDate = startDate;
  var step = options && ('step' in options) ? Number(options.step) : 1;
  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number equal or greater than 1');
  while (currentDate.getTime() <= endTime) {
    dates.push(_toDateIndexJsDefault.default(currentDate));
    currentDate = _addMinutesIndexJsDefault.default(currentDate, step);
  }
  return dates;
}
exports.default = eachMinuteOfInterval;
