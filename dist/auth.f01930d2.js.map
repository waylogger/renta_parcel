{"version":3,"sources":["../node_modules/regenerator-runtime/runtime.js","static/connection/auth.js"],"names":["server","port","passwordHash","login","signInEndpoint","refreshEndpoint","dataApiEndpoint","sessionKeys","expires","accessToken","refreshToken","saveInSessionStorage","someObject","JSON","parse","keys","Object","forEach","key","el","sessionStorage","setItem","readFromSessionStorage","resObj","a","getItem","getSavedSecret","savedToken","undefined","saveSecret","secret","getToken","accessData","path","bdy","stringify","fetch","method","body","headers","then","res","json","token","Token","newToken","tokenExpired","Math","floor","Date","now","auth","UserName","PasswordHash","getAccess"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACNA;ADOA;AACA;AACA;AACA;AACA;AACA,ACVO,IAAMA,MAAM,GAAG,qBAAf;ADWP;AACA,ACXO,IAAMC,IAAI,GAAG,OAAb;ADYP;AACA,ACZO,IAAMC,YAAY,GAAG,kIAArB;ADaP;AACA,ACbO,IAAMC,KAAK,GAAG,eAAd;ADcP;AACA,ACdO,IAAMC,cAAc,GAAG,uBAAvB;ADeP;AACA,ACfO,IAAMC,eAAe,GAAG,wBAAxB;ADgBP;AACA,AChBO,IAAMC,eAAe,GAAG,UAAxB;ADiBP,AChBA;ADiBA,AChBA;ADiBA,AChBA;ADiBA;AACA;AACA,ACjBO,IAAMC,WAAW,GAAG;ADkB3B,ACjBCC,EAAAA,OAAO,EAAE,SADiB;ADmB3B,ACjBCC,EAAAA,WAAW,EAAE,aAFa;ADoB3B,ACjBCC,EAAAA,YAAY,EAAE;ADkBf,ACrB2B,CAApB;ADsBP,ACjBA;ADkBA,ACjBA;ADkBA,ACjBA;ADkBA,ACjBA;ADkBA,ACjBA;ADkBA;AACA;AACA;AACA,ACpBA,SAASC,oBAAT,CAA8BC,UAA9B,EAA0C;ADqB1C,ACpBCA,EAAAA,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWF,UAAX,CAAb;ADqBD,ACpBC,MAAMG,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYH,UAAZ,CAAb;ADqBD,ACpBCG,EAAAA,IAAI,CAACE,OAAL,CAAa,UAACC,GAAD,EAAMC,EAAN,EAAa;ADqB3B,ACpBEC,IAAAA,cAAc,CAACC,OAAf,CAAuBH,GAAvB,EAA4BN,UAAU,CAACM,GAAD,CAAtC;ADqBF,ACpBE,GAFD;ADuBD,ACpBC;ADqBD,ACpBA;ADqBA,ACpBA;ADqBA,ACpBA;ADqBA,ACpBA;ADqBA,ACpBA;ADqBA,ACpBA;ADqBA;AACA;AACA,ACtBA,SAASI,sBAAT,CAAgCP,IAAhC,EAAsC;ADuBtC,ACtBC,MAAMQ,MAAM,GAAG,EAAf;ADuBD,ACtBCR,EAAAA,IAAI,CAACE,OAAL,CAAa,UAACE,EAAD,EAAQ;ADuBtB,ACtBE,QAAMK,CAAC,GAAGJ,cAAc,CAACK,OAAf,CAAuBN,EAAvB,CAAV;ADuBF,ACtBEI,IAAAA,MAAM,CAACJ,EAAD,CAAN,GAAaK,CAAb;ADuBF,ACtBE,GAHD;AD0BD,ACtBC,SAAOD,MAAP;ADuBD,ACtBC,EACD;ADsBA;AACA,ACtBA;ADuBA,ACtBA;ADuBA,ACtBA;ADuBA,ACtBA;ADuBA;AACA;AACA,SCxBeG;ADyBf;AACA,EClBA;ADmBA;AACA;AACA;AACA,4EC9BA;AD+BA,AC/BA;ADgCA,AChCA;ADiCA,ACjCA;ADkCA,AClCA;ADmCA,ACnCA;ADoCA,ACnCOC,YAAAA,UADP,GACoBL,sBAAsB,CAACN,MAAM,CAACD,IAAP,CAAYR,WAAZ,CAAD,CAD1C;ADqCA;AACA,ACtCA,kBAEK,CAACoB,UAAU,CAAClB,WAAZ,IAA2B,CAACkB,UAAU,CAACjB,YAAvC,IAAuD,CAACiB,UAAU,CAACnB,OAFxE;ADuCA,ACvCA;ADwCA,ACxCA;ADyCA,ACzCA;AD0CA;AACA,AC3CA,6CAGQoB,SAHR;AD4CA;AACA,AC7CA;AD8CA,AC9CA,6CAKQD,UALR;AD+CA;AACA,AChDA;ADiDA,ACjDA;ADkDA,AClDA;ADmDA,ACnDA;ADoDA,ACpDA;ADqDA,ACrDA;ADsDA,ACtDA;ADuDA;AACA;AACA;AACA,SCjDeE;ADkDf;AACA,EChDA;ADiDA;AACA;AACA;AACA,wECvDA,kBAA0BC,MAA1B;ADwDA,ACxDA;ADyDA,ACzDA;AD0DA,AC1DA;AD2DA,AC3DA;AD4DA,AC5DA,8CACQnB,oBAAoB,CAACmB,MAAD,CAD5B;AD6DA;AACA,AC9DA;AD+DA,AC/DA;ADgEA,AChEA;ADiEA,ACjEA;ADkEA,AClEA;ADmEA,ACnEA;ADoEA,ACpEA;ADqEA;AACA;AACA;AACA,SCpEeC;ADqEf;AACA,ECvDA;ADwDA;AACA;AACA;AACA,sEC1EA,kBAAwBC,UAAxB;AD2EA,AC3EA;AD4EA,AC5EA;AD6EA,AC7EA;AD8EA,AC9EA;AD+EA,AC/EA;ADgFA,AChFA,gBACMA,UADN;ADiFA,ACjFA;ADkFA,AClFA;ADmFA,ACnFA;ADoFA;AACA,ACrFA,8CAESJ,SAFT;ADsFA;AACA,ACvFA;ADwFA,ACnFOK,YAAAA,IALP,aAKiBjC,MALjB,cAK2BC,IAL3B,SAKkCG,cALlC;ADyFA,ACnFO8B,YAAAA,GANP,GAMarB,IAAI,CAACsB,SAAL,CAAeH,UAAf,CANb;AD0FA,AC1FA;AD2FA,AC3FA,mBAOqBI,KAAK,CAACH,IAAD,EAAO;ADqFjC,ACpFEI,cAAAA,MAAM,EAAE,MADuB;ADsFjC,ACpFEC,cAAAA,IAAI,EAAEJ,GAFyB;ADuFjC,ACpFEK,cAAAA,OAAO,EAAE;ADqFX,ACrFa,gCAAgB;ADsF7B,ACtFW;ADuFX,AC1FiC,aAAP,CAAL,CAIjBC,IAJiB,CAIZ,UAAAC,GAAG;ADuFZ,ACvFY,qBAAIA,GAAG,CAACC,IAAJ,EAAJ;ADwFZ,ACxFY,aAJS,EAIOF,IAJP,CAIY,UAAAC,GAAG;ADyFpC,ACzFoC,qBAAIA,GAAJ;AD0FpC,AC1FoC,aAJf,CAPrB;ADsGA;AACA,ACvGA;ADwGA,ACjGOE,YAAAA,KAPP;ADyGA,ACzGA,8CAYQA,KAZR;AD0GA;AACA,AC3GA;AD4GA,AC5GA;AD6GA,AC7GA;AD8GA,AC9GA;AD+GA,AC/GA;ADgHA,AChHA;ADiHA,ACjHA;ADkHA;AACA;AACA;AACA,SCrGejC;ADsGf;AACA,ECtFA;ADuFA;AACA;AACA;AACA,0EC3GA,kBAA4BiC,KAA5B;AD4GA,AC5GA;AD6GA,AC7GA;AD8GA,AC9GA;AD+GA,AC/GA;ADgHA,AChHA;ADiHA,ACjHA,kBACK,CAACA,KAAD,IAAU,CAACA,KAAK,CAACjC,YADtB;ADkHA,AClHA;ADmHA,ACnHA;ADoHA,ACpHA;ADqHA;AACA,ACtHA,8CAESkB,SAFT;ADuHA;AACA,ACxHA;ADyHA,ACpHOK,YAAAA,IALP,aAKiBjC,MALjB,cAK2BC,IAL3B,SAKkCI,eALlC;AD0HA,ACpHO6B,YAAAA,GANP,GAMarB,IAAI,CAACsB,SAAL,CAAe;ADqH5B,ACpHES,cAAAA,KAAK,EAAED,KAAK,CAACjC;ADqHf,ACtH4B,aAAf,CANb;AD6HA,AC7HA;AD8HA,AC9HA,mBASwB0B,KAAK,CAACH,IAAD,EAAO;ADsHpC,ACrHEI,cAAAA,MAAM,EAAE,MAD0B;ADuHpC,ACrHEC,cAAAA,IAAI,EAAEJ,GAF4B;ADwHpC,ACrHEK,cAAAA,OAAO,EAAE;ADsHX,ACtHa,gCAAgB;ADuH7B,ACvHW;ADwHX,AC3HoC,aAAP,CAAL,CAIpBC,IAJoB,CAIf,UAAAC,GAAG;ADwHZ,ACxHY,qBAAIA,GAAG,CAACC,IAAJ,EAAJ;ADyHZ,ACzHY,aAJY,EAIIF,IAJJ,CAIS,UAAAC,GAAG;AD0HpC,AC1HoC,qBAAIA,GAAJ;AD2HpC,AC3HoC,aAJZ,CATxB;ADyIA;AACA,AC1IA;AD2IA,AClIOI,YAAAA,QATP;AD4IA,AC5IA,8CAcQA,QAdR;AD6IA;AACA,AC9IA;AD+IA,AC/IA;ADgJA,AChJA;ADiJA,ACjJA;ADkJA,AClJA;ADmJA,ACnJA;ADoJA,ACpJA;ADqJA;AACA;AACA;AACA,SCtIeC;ADuIf;AACA,ECrIA;ADsIA;AACA;AACA;AACA,0EC5IA,kBAA4BH,KAA5B;AD6IA,AC7IA;AD8IA,AC9IA;AD+IA,AC/IA;ADgJA,AChJA;ADiJA,ACjJA,8CACQA,KAAK,CAACnC,OAAN,GAAgBuC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB,CADxB;ADkJA;AACA,ACnJA;ADoJA,ACpJA;ADqJA,ACrJA;ADsJA,ACtJA;ADuJA,ACvJA;ADwJA,ACxJA;ADyJA,ACzJA;AD0JA;AACA;AACA;AACA,ACzJA,IAAIP,KAAK,GAAG,EAAZ;AD0JA;AACA,SC1JeQ;AD2Jf;AACA,ECtIA;ADuIA,ACrIA;ADsIA;AACA;AACA;AACA,kECjKA,kBAAoBnB,UAApB;ADkKA,AClKA;ADmKA,ACnKA;ADoKA,ACpKA;ADqKA,ACrKA;ADsKA,ACtKA;ADuKA,ACvKA;ADwKA,ACxKA,mBAC0BN,cAAc,EADxC;ADyKA;AACA,AC1KA;AD2KA,AC1KOC,YAAAA,UADP;AD4KA;AACA,AC7KA,gBAEMA,UAFN;AD8KA,AC9KA;AD+KA,AC/KA;ADgLA,AChLA;ADiLA;AACA,AClLA;ADmLA,ACnLA,mBAGgBI,QAAQ,CAACC,UAAD,CAHxB;ADoLA;AACA,ACrLA;ADsLA,ACnLEW,YAAAA,KAHF;ADuLA;AACA,ACxLA,gBAIOA,KAJP;ADyLA,ACzLA;AD0LA,AC1LA;AD2LA,AC3LA;AD4LA;AACA,AC7LA,8CAKU,mBALV;AD8LA;AACA,AC/LA;ADgMA,AChMA;ADiMA,ACjMA,mBAMQd,UAAU,CAAChB,IAAI,CAACsB,SAAL,CAAeQ,KAAf,EAAsB,IAAtB,EAA4B,GAA5B,CAAD,CANlB;ADkMA;AACA,ACnMA;ADoMA,ACpMA,8CAOS,mBAPT;ADqMA;AACA,ACtMA;ADuMA,ACvMA;ADwMA,ACxMA,mBAUgBG,YAAY,CAACnB,UAAD,CAV5B;ADyMA;AACA,AC1MA;AD2MA,AC3MA;AD4MA,AC5MA;AD6MA,AC7MA;AD8MA,AC9MA;AD+MA;AACA,AChNA;ADiNA,ACjNA,mBAWgBjB,YAAY,CAACiB,UAAD,CAX5B;ADkNA;AACA,ACnNA;ADoNA,ACzMEgB,YAAAA,KAXF;ADqNA;AACA,ACtNA,gBAYOA,KAZP;ADuNA,ACvNA;ADwNA,ACxNA;ADyNA,ACzNA;AD0NA;AACA,AC3NA,8CAaU,mBAbV;AD4NA;AACA,AC7NA;AD8NA,AC9NA;AD+NA,AC/NA,mBAcQd,UAAU,CAAChB,IAAI,CAACsB,SAAL,CAAeQ,KAAf,EAAsB,IAAtB,EAA4B,GAA5B,CAAD,CAdlB;ADgOA;AACA,ACjOA;ADkOA,AClOA,8CAeS,mBAfT;ADmOA;AACA,ACpOA;ADqOA,ACnNEA,YAAAA,KAAK,GAAGhB,UAAR;ADoNF,ACtOA,8CAmBS,mBAnBT;ADuOA;AACA,ACxOA;ADyOA,ACzOA;AD0OA,AC1OA;AD2OA,AC3OA;AD4OA,AC5OA;AD6OA,AC7OA;AD8OA,AC9OA;AD+OA;AACA;AACA;AACA,ACzNA,IAAMK,UAAU,GAAG;AD0NnB,ACzNCoB,EAAAA,QAAQ,EAAEjD,KADQ;AD2NnB,ACzNCkD,EAAAA,YAAY,EAAEnD;AD0Nf,AC5NmB,CAAnB,EAIA;ADyNA;AACA,SCzNsBoD;AD0NtB;AACA;AACA;AACA;AACA,uEC9NO;AD+NP,AC/NO;ADgOP,AChOO;ADiOP,ACjOO;ADkOP,AClOO;ADmOP,ACnOO;ADoOP,ACpOO,mBACAH,IAAI,CAACnB,UAAD,CADJ;ADqOP;AACA,ACtOO;ADuOP,ACvOO,8CAECW,KAAK,CAAClC,WAFP;ADwOP;AACA,ACzOO;AD0OP,AC1OO;AD2OP,AC3OO;AD4OP,AC5OO;AD6OP,AC7OO;AD8OP,AC9OO;AD+OP,AC/OO;ADgfile":"auth.f01930d2.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","\nimport 'regenerator-runtime/runtime'\n\nexport const server = 'http://81.177.48.80';\nexport const port = '50500';\nexport const passwordHash = 'f7f8e967f2756082ada759e8e189e772e00a1deb13583e9beee02ad9a5420fda5ce2069e942cdc22a8cae4ecb90ace005737c6c96dd655330f0f1ae6a0ffd8fc';\nexport const login = 'USER_FOR_SITE';\nexport const signInEndpoint = '/api/v1/tokens/signin';\nexport const refreshEndpoint = '/api/v1/tokens/refresh';\nexport const dataApiEndpoint = 'data_api'\n/**\n * @namespace\n*/\n\nexport const sessionKeys = {\n\texpires: 'expires',\n\taccessToken: 'accessToken',\n\trefreshToken: 'refreshToken',\n}\n/**\n * @function\n * @param {object}\n * @description wrap over localstorage for saving js objects\n*/\nfunction saveInSessionStorage(someObject) {\n\tsomeObject = JSON.parse(someObject);\n\tconst keys = Object.keys(someObject);\n\tkeys.forEach((key, el) => {\n\t\tsessionStorage.setItem(key, someObject[key]);\n\t});\n}\n/**\n * @function\n * @param {array} keys \n * @returns {object}\n * @description convert sessionStorage to JSObject\n*/\nfunction readFromSessionStorage(keys) {\n\tconst resObj = {};\n\tkeys.forEach((el) => {\n\t\tconst a = sessionStorage.getItem(el);\n\t\tresObj[el] = a;\n\t});\n\treturn resObj;\n}\n// ------------------------------------------------------------------------------------------------\n/**\n * @function\n * @returns sessionKeys from SessionStorage\n*/\nasync function getSavedSecret() {\n\tconst savedToken = readFromSessionStorage(Object.keys(sessionKeys));\n\tif (!savedToken.accessToken || !savedToken.refreshToken || !savedToken.expires)\n\treturn undefined;\n\telse\n\treturn savedToken;\n}\n\n// ------------------------------------------------------------------------------------------------\nasync function saveSecret(secret) {\n\treturn saveInSessionStorage(secret);\n}\n// ------------------------------------------------------------------------------------------------\nasync function getToken(accessData) {\n\tif (!accessData) {\n\t\treturn undefined;\n\t}\n\n\tconst path = `${server}:${port}${signInEndpoint}`;\n\tconst bdy = JSON.stringify(accessData);\n\tconst token = await fetch(path, {\n\t\tmethod: 'POST',\n\t\tbody: bdy,\n\t\theaders: { 'Content-Type': 'application/json' }\n\t}).then(res => res.json()).then(res => res);\n\treturn token;\n\n}\n// ------------------------------------------------------------------------------------------------\nasync function refreshToken(token) {\n\tif (!token || !token.refreshToken) {\n\t\treturn undefined;\n\t}\n\n\tconst path = `${server}:${port}${refreshEndpoint}`;\n\tconst bdy = JSON.stringify({\n\t\tToken: token.refreshToken,\n\t});\n\tconst newToken = await fetch(path, {\n\t\tmethod: 'POST',\n\t\tbody: bdy,\n\t\theaders: { 'Content-Type': 'application/json' },\n\t}).then(res => res.json()).then(res => res);\n\treturn newToken;\n\n}\n// ------------------------------------------------------------------------------------------------\nasync function tokenExpired(token) {\n\treturn token.expires < Math.floor(Date.now() / 1000);\n}\n// ------------------------------------------------------------------------------------------------\nlet token = \"\";\nasync function auth(accessData) {\n\tconst savedToken = await getSavedSecret();\n\tif (!savedToken) {\n\t\ttoken = await getToken(accessData);\n\t\tif (!token)\n\t\t\treturn 'codes.authFailure'\n\t\tawait saveSecret(JSON.stringify(token, null, ' '));\n\t\treturn 'codes.authSuccess';\n\n\t}\n\telse if (await tokenExpired(savedToken)) {\n\t\ttoken = await refreshToken(savedToken);\n\t\tif (!token)\n\t\t\treturn 'codes.authFailure';\n\t\tawait saveSecret(JSON.stringify(token, null, ' '));\n\t\treturn 'codes.authSuccess'\n\t}\n\telse {\n\t\ttoken = savedToken;\n\t\treturn 'codes.authSuccess'\n\t}\n}\n// ------------------------------------------------------------------------------------------------\n\n// ------------------------------------------------------------------------------------------------\nconst accessData = {\n\tUserName: login,\n\tPasswordHash: passwordHash,\n}\n// ------------------------------------------------------------------------------------------------\nexport async function getAccess() {\n\tawait auth(accessData);\n\treturn token.accessToken;\n}"]}